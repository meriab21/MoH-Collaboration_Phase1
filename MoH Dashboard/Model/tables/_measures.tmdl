table _measures

	measure 'Indicator Performance Values' =
			VAR TotalIndicatorValue = [Total Indicator Values]
			 VAR ShowOrgUnitRow = [OrgUnitBrowseDepth] <= [OrgUnitRowDepth]
			 VAR Result = IF(ShowOrgUnitRow, TotalIndicatorValue)
			 RETURN Result

	measure 'Indicator Baseline Values' =
			SWITCH(
			    TRUE(),
			    SELECTEDVALUE('indicators'[indicatortype])="Number (Factor 1)", SUM('indicator_values'[baseline_value]),
			    AVERAGE('indicator_values'[baseline_value])
			)

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Indicator Target Values' =
			SWITCH(
			    TRUE(),
			    SELECTEDVALUE('indicators'[indicatortype])="Number (Factor 1)", SUM('indicator_values'[target_value]),
			    AVERAGE('indicator_values'[target_value])
			)

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure CurrentYearMonth = CALCULATE(MAX('indicator_values'[period]),REMOVEFILTERS('periods'), 'periods'[period_category]="Monthly")

	measure 'Rightnote_Current Month Name' =
			
			LOOKUPVALUE(
			    'periods'[eth_month_name],
			    'periods'[period],
			    [CurrentYearMonth]
			)

	measure 'Selected period performance value' = CALCULATE([Indicator Performance Values], indicator_values[period]=SELECTEDVALUE(periods[period], [CurrentYearMonth]))

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure performance_normalization = ```
			
			VAR Xi = [Indicator Performance Values]
			VAR MnX = 
			    MINX(
			        ALLSELECTED('Regions'[org_unit_id]), 
			        [Indicator Performance Values]
			    )
			VAR MxX = [Indicator Target Values]  -- Use your target measure value
			
			RETURN
			    IF(
			        ISBLANK(Xi) || ISBLANK(MnX) || ISBLANK(MxX),
			        BLANK(),  -- Return blank if any values are blank
			        IF(
			            MxX <= MnX,  -- Check if max target value is less than or equal to min
			            DIVIDE(ABS(Xi - MnX), ABS(MxX - MnX)),  -- Perform absolute normalization
			            DIVIDE(Xi - MnX, MxX - MnX)  -- Otherwise, perform standard normalization
			        )
			    )
			
			```

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Quarters =
			SWITCH(
			    SELECTEDVALUE(periods[eth_quarter]),
			    "Quarter 1", [Indicator Performance Values],
			    "Quarter 2", [Indicator Performance Values],
			    "Quarter 3", [Indicator Performance Values],
			    "Quarter 4", [Indicator Performance Values]
			)
		formatString: 0

	measure 'Q1 performance' = CALCULATE([Indicator Performance Values], periods[eth_quarter] ="Quarter 1")

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Q2 performance' = CALCULATE([Indicator Performance Values], periods[eth_quarter] ="Quarter 2")

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Q3 performance' = CALCULATE([Indicator Performance Values], periods[eth_quarter] ="Quarter 3")

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Performance vs Target' = ```
			
			SWITCH(
			    TRUE(),
			    [Indicator Performance Values]>[Indicator Target Values], 1,
			    [Indicator Performance Values]<[Indicator Target Values], 0,
			    [Indicator Performance Values] < 0, -1, 
			    [Indicator Baseline Values] < 0, -1
			    )
			```
		formatString: 0

	measure 'Total Indicator Values' =
			SWITCH(
			    TRUE(),
			    SELECTEDVALUE('indicators'[indicatortype])="Number (Factor 1)", SUM('indicator_values'[performance_value]),
			    AVERAGE('indicator_values'[performance_value])
			 )

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure OrgUnitBrowseDepth = ISINSCOPE('org_units'[l1name])+ISINSCOPE('org_units'[l2name])+ISINSCOPE('org_units'[l3name])+ISINSCOPE('org_units'[l4name])+ISINSCOPE('org_units'[l5name])+ISINSCOPE('org_units'[l6name])+ISINSCOPE('org_units'[l7name])
		formatString: 0

	measure OrgUnitRowDepth = MAX('org_units'[level])
		formatString: 0

	measure 'Display cards' = ```
			"Indicator: " & SELECTEDVALUE(indicators[displayname], "All Indicators") & 
			" | Org unit: " & SELECTEDVALUE(org_units[l2name], "National level") & 
			" | Year: " & SELECTEDVALUE(periods[eth_year])
			// " | Selected Year: " & 
			// IF(
			//     HASONEVALUE(periods[eth_year]), 
			//     SELECTEDVALUE(periods[eth_year]), 
			//     CONCATENATEX(VALUES(periods[eth_year]), periods[eth_year], " & ")
			// )
			```

	partition _measures = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
				in
				    #"Removed Columns"

	annotation PBI_ResultType = Table

